{"version":3,"sources":["SearchCity.js","MapContainer.js","ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","Container","Form","onSubmit","this","props","handleSubmit","Group","controlId","Control","type","placeholder","value","city","onChange","handleCityChange","Button","variant","React","Component","MapContainer","lat","lon","parseFloat","google","zoom","style","width","height","initialCenter","lng","center","GoogleApiWrapper","apiKey","ViewWeather","tempCity","temp","temp_min","temp_max","humidity","pressure","speed","deg","rain1h","error","toFixed","Row","Col","App","state","imBusy","e","preventDefault","getData","setState","api","axios","get","then","res","coord","data","main","wind","undefined","rain","Object","values","catch","err","console","log","finally","prevState","target","loader","id","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3bb5b13.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nclass SearchCity extends React.Component {\r\n    render() {\r\n        return(\r\n            <Container>\r\n                <Form onSubmit={this.props.handleSubmit}>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Control type=\"text\" placeholder=\"Type in your city\" value={this.props.city} onChange={this.props.handleCityChange} /> \r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Check the weather!\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MapContainer extends React.Component {\r\n  render() {\r\n    let { lat, lon } = this.props;\r\n    lat = parseFloat(lat)\r\n    lon = parseFloat(lon)\r\n    const mapStyles = {\r\n      width: '90%',\r\n      height: '100%',\r\n    };\r\n    return(\r\n      <Map\r\n        google={this.props.google}\r\n        zoom={12}\r\n        style={mapStyles}\r\n        initialCenter={{ lat: lat, lng: lon}}\r\n        center={{ lat: lat, lng: lon}}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyDVr6O0_CwMqOFslldgWWKDuOookq2iBcg'\r\n  })(MapContainer);","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport MapContainer from './MapContainer';\r\n\r\nclass ViewWeather extends React.Component {\r\n    render() {\r\n        let { tempCity, lon, lat, temp, temp_min, temp_max, humidity, pressure, speed, deg, rain1h, error } = this.props;\r\n        temp = (temp - 273.15).toFixed(2);\r\n        temp_min = (temp_min - 273.15).toFixed(2);\r\n        temp_max = (temp_max - 273.15).toFixed(2);\r\n        if (tempCity === '') { return(<div></div>) } \r\n        else if (error === true) { return(<div>We couldn't find:{\" \"}{tempCity}</div>)}\r\n        else {\r\n            return(\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <h2>Your city: {tempCity}</h2>\r\n                            Longitude: {lon}<br />\r\n                            Latitude: {lat}<br />\r\n                            Current temperature: {temp}<br />\r\n                            Minimum temperature: {temp_min}<br />\r\n                            Maximum temperature: {temp_max}<br />\r\n                            Humidity: {humidity}%<br />\r\n                            Pressure: {pressure}hpa<br />\r\n                            Wind speed: {speed}m/s<br />\r\n                            Wind direction: {deg}<br />\r\n                            Rain: {rain1h}\r\n                        </Col>\r\n                        <Col>\r\n                            <MapContainer lon={lon} lat={lat} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ViewWeather;","import React from 'react';\nimport './App.css';\nimport SearchCity from './SearchCity';\nimport ViewWeather from './ViewWeather';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    city: '',\n    tempCity: '',\n    lon: '',\n    lat: '',\n    temp: '',\n    temp_min: '',\n    temp_max: '',\n    humidity: '',\n    pressure: '',\n    speed: '',\n    deg: '',\n    rain1h: '',\n    error: false,\n    imBusy: false,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.getData();\n}\n\n  getData = () => {\n      this.setState({imBusy: true});\n      const api = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&appid=05508bb378ad891b493b0c886cca7a57`; \n      axios.get(api)\n      .then(res => {\n          const coord = res.data.coord;\n          const main = res.data.main;\n          const wind = res.data.wind;\n          const lon = coord.lon;\n          const lat = coord.lat;\n          const temp = main.temp;\n          const temp_min = main.temp_min;\n          const temp_max = main.temp_max;\n          const humidity = main.humidity;\n          const pressure = main.pressure;\n          const speed = wind.speed;\n          const deg = wind.deg;\n          let rain1h = '';\n          if (res.data.rain === undefined) { rain1h = 'no rain'} else { rain1h = Object.values(res.data.rain)[0] };\n          this.setState({\n              lon: lon, lat: lat, temp: temp, temp_min: temp_min, temp_max: temp_max, \n              humidity: humidity, pressure: pressure, speed: speed, deg: deg, rain1h: rain1h, error: false\n          })\n      })\n      .catch(err => {\n          this.setState({error: true});\n          console.log(err);\n      })\n      .finally(res => {\n          this.setState(prevState=>({\n            city: '', tempCity: prevState.city, imBusy: false \n          }))\n      });\n  }\n\n    handleCityChange = e => {\n      this.setState({city: e.target.value});\n  }\n\nrender() {\n    const { city, tempCity, lon, lat, temp, temp_min, temp_max, humidity, pressure, speed, deg, rain1h, error, imBusy } = this.state;\n    const loader = <div id=\"loaderBox\" className=\"loader-box\"><div className=\"lds-ripple\"><div></div><div></div></div></div>\n    return (\n      <Container className=\"main-container\">\n        {imBusy && loader}\n        <Row>\n          <Col>\n            <h1>Weather app</h1>\n          </Col>\n          <SearchCity city={city} handleSubmit={this.handleSubmit} handleCityChange={this.handleCityChange} />\n        </Row>\n        <br /><br />\n        <Row>\n          <ViewWeather tempCity={tempCity} lon={lon} lat={lat} temp={temp} temp_min={temp_min} \n          temp_max={temp_max} humidity={humidity} pressure={pressure} speed={speed} \n          deg={deg} rain1h={rain1h} error={error}/>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}